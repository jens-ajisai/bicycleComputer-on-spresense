#!/usr/bin/env python3
############################################################################
# examples/audio_dual_players/config/mem_layout.conf
#
#   Copyright 2019 Sony Semiconductor Solutions Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Sony Semiconductor Solutions Corporation nor
#    the names of its contributors may be used to endorse or promote
#    products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

import sys
sys.path.append('/Users/jens/work/mcu_prj/prj/spresense/references/spresense-sdk/spresense/sdk/tools')

UseFence = True  # Use of a pool fence

from mem_layout import *


U_STD_ALIGN  = 8          # standard alignment
U_TILE_ALIGN = 0x20000    # Memory Tile Align 128KB

MemoryDevices.init(
  # name         ram    addr        size
  ["AUD_SRAM",   True,  0x0d160000, 1 * U_TILE_ALIGN],
  None # end of definition
)

FixedAreas.init(
  # name,                  device,    align,        size,         fence
  ["AUDIO_WORK_AREA",     "AUD_SRAM", U_STD_ALIGN,  0x0001ed00,   False], # Audio work area
  ["MSG_QUE_AREA",        "AUD_SRAM", U_STD_ALIGN,  0x00001000,   False], # message queue area
  ["MEMMGR_WORK_AREA",    "AUD_SRAM", U_STD_ALIGN,  0x00000200,   False], # MemMgrLite WORK Area
  ["MEMMGR_DATA_AREA",    "AUD_SRAM", U_STD_ALIGN,  0x00000100,   False], # MemMgrLite DATA Area
  None # end of definition
)

U_REC_MIC_IN_BUF_SIZE = 1920
U_REC_MIC_IN_BUF_SEG_NUM = 5
U_REC_MIC_IN_BUF_POOL_SIZE = U_REC_MIC_IN_BUF_SIZE * U_REC_MIC_IN_BUF_SEG_NUM

U_APU_CMD_SIZE = 92
U_PRE_APU_CMD_SEG_NUM = 3
U_PRE_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_PRE_APU_CMD_SEG_NUM


U_FIFO_STRUCT_SIZE = 20

U_AUDIO_FIFO_POOL_SIZE = 1920
U_AUDIO_FIFO_POOL_SEG_NUM = 26
U_AUDIO_FIFO_POOL_POOL_SIZE = U_AUDIO_FIFO_POOL_SIZE * U_AUDIO_FIFO_POOL_SEG_NUM + U_FIFO_STRUCT_SIZE

U_LVGL_BUF_SIZE = 240 * 30

U_MQTT_MSG_BUF_SIZE = 1500
U_MQTT_MSG_BUF_SEG_NUM = 4
U_MQTT_MSG_BUF_POOL_SIZE = U_REC_MIC_IN_BUF_SIZE * U_MQTT_MSG_BUF_SEG_NUM

U_NET_BUF_SIZE = 4096

U_OPUS_FIFO_POOL_SIZE = 1500
U_OPUS_FIFO_POOL_SEG_NUM = 4
U_OPUS_FIFO_POOL_POOL_SIZE = U_OPUS_FIFO_POOL_SIZE * U_OPUS_FIFO_POOL_SEG_NUM + U_FIFO_STRUCT_SIZE

U_AUDIO_MODULE_STACK_POOL_SIZE = (1024 * 23)
U_CAMERA_MODULE_STACK_POOL_SIZE = (1024 * 3)
U_CLOUD_MODULE_STACK_POOL_SIZE = (1024 * 4)
U_GLOBALSTATUS_STACK_POOL_SIZE = (1024 * 3)
U_GNSS_MODULE_STACK_POOL_SIZE = (1024 * 2)
U_GNSS_FENCE_MODULE_STACK_POOL_SIZE = (1024 * 2)
U_IMU_STACK_POOL_SIZE = (1024 * 1)
U_LTE_MODULE_STACK_POOL_SIZE = (1024 * 1)
U_MQTT_MODULE_STACK_POOL_SIZE = (1024 * 3)
U_MQTT_MODULE_POLL_STACK_POOL_SIZE = (1024 * 3)
U_CYCLE_SENSOR_STACK_POOL_SIZE = (1024 * 4)
U_UI_TFT_MODULE_STACK_POOL_SIZE = (1024 * 4)
U_SHELL_MODULE_STACK_POOL_SIZE = (1024 * 4)

PoolAreas.init(
  [ # layout 0 for PCM capture
   #[ name,                   area,              align,        pool-size,                   seg,                         fence]
    ["INPUT_BUF_POOL",        "AUDIO_WORK_AREA", U_STD_ALIGN,  U_REC_MIC_IN_BUF_POOL_SIZE,  U_REC_MIC_IN_BUF_SEG_NUM,    True ],
    ["PRE_APU_CMD_POOL",      "AUDIO_WORK_AREA", U_STD_ALIGN,  U_PRE_APU_CMD_POOL_SIZE,     U_PRE_APU_CMD_SEG_NUM,       True ],
    ["AUDIO_FIFO_POOL",       "AUDIO_WORK_AREA", U_STD_ALIGN,  U_AUDIO_FIFO_POOL_POOL_SIZE, 1,                           True ],
    ["DISPLAY_BUF_POOL",      "AUDIO_WORK_AREA", U_STD_ALIGN,  U_LVGL_BUF_SIZE,             1,                           True ],
    ["MQTT_MSG_BUF_POOL",     "AUDIO_WORK_AREA", U_STD_ALIGN,  U_MQTT_MSG_BUF_POOL_SIZE,    U_MQTT_MSG_BUF_SEG_NUM,      True ],
    ["NET_BUF_POOL",          "AUDIO_WORK_AREA", U_STD_ALIGN,  U_NET_BUF_SIZE,              1,                           True ],
    ["OPUS_BUF_POOL",         "AUDIO_WORK_AREA", U_STD_ALIGN,  U_OPUS_FIFO_POOL_POOL_SIZE,  1,                           True ],
#    ["U_AUDIO_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_AUDIO_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_CAMERA_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_CAMERA_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_CLOUD_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_CLOUD_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_GLOBALSTATUS_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_GLOBALSTATUS_STACK_POOL_SIZE, 1, True ],
#    ["U_GNSS_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_GNSS_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_GNSS_FENCE_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_GNSS_FENCE_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_IMU_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_IMU_STACK_POOL_SIZE, 1, True ],
#    ["U_LTE_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_LTE_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_MQTT_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_MQTT_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_MQTT_MODULE_POLL_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_MQTT_MODULE_POLL_STACK_POOL_SIZE, 1, True ],
#    ["U_CYCLE_SENSOR_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_CYCLE_SENSOR_STACK_POOL_SIZE, 1, True ],
#    ["U_UI_TFT_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_UI_TFT_MODULE_STACK_POOL_SIZE, 1, True ],
#    ["U_SHELL_MODULE_STACK_POOL", "AUDIO_WORK_AREA", U_STD_ALIGN, U_SHELL_MODULE_STACK_POOL_SIZE, 1, True ],
    ["FREE_POOL",             "AUDIO_WORK_AREA", U_STD_ALIGN,  38300,                       1,                           True ],
    None # end of each layout
  ], # end of layout 0
  
  None # end of definition
)

generate_files()